@inherits LayoutComponentBase

@inject Core.Services.SessionService _sessionService
@inject NavigationManager Navigation


<div class="page">
   <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">CRM Dev Freela</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <NavLink class="nav-link text-dark" href="" Match="NavLinkMatch.All">
                                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="counter">
                                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="weather">
                                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                            </NavLink>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private Timer _sessionTimer;
    private int _sessionTimeout = 30 * 60 * 1000; // 30 minutos

    protected override async Task OnInitializedAsync()
    {
        _sessionTimer = new Timer(async state => await CheckSession(), null, 0, _sessionTimeout);
    }

    private async Task CheckSession()
    {
        var token = await _sessionService.GetSessionTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            _sessionTimer?.Dispose();

            
            Navigation.NavigateTo("/login");
        }
    }

    public void Dispose()
    {
        _sessionTimer?.Dispose();
    }
}
